DevOps Day2day Activities:
Docker Build then Push Image to DockerHub with Jenkins || Also, 
How to Handle Errors at Jenkins Console Output?
________________________________________
Project Goal
Create an automated pipeline to build, tag, and push a Docker image to DockerHub using Jenkins and Docker. This end-to-end project will involve setting up a bastion host, Jenkins, a target application server, and integrating DockerHub as the image repository.
________________________________________
Project Steps
________________________________________
Step 1: Create the Bastion EC2 Instance
1.	Launch EC2 Instance:
o	Instance Type: t2.medium
o	Storage: 30 GiB
o	OS: Ubuntu 22.04 LTS
2.	Connect to the Bastion Instance:
ssh -i key.pem ubuntu@<bastion-ip>
3.	Update and Install Jenkins:
sudo apt update && sudo apt upgrade -y
sudo apt install openjdk-17-jdk -y
wget -q -O - https://pkg.jenkins.io/debian/jenkins.io.key | sudo apt-key add -
sudo sh -c 'echo deb http://pkg.jenkins.io/debian-stable binary/ > /etc/apt/sources.list.d/jenkins.list'
sudo apt update && sudo apt install jenkins -y
sudo systemctl start jenkins
sudo systemctl enable Jenkins
ss -tunlw   …see 8080

4.	Access Jenkins Web Interface:
o	Open http://<bastion-ip>:8080 in a browser.
o	Retrieve the initial admin password:
sudo cat /var/lib/jenkins/secrets/initialAdminPassword
o	Complete the setup wizard and install suggested plugins.
________________________________________
Step 2: Create the ec2 Server for Docker
1.	Launch EC2 server Instance:
o	Instance Type: t2.medium
o	Storage: 20 GiB
o	OS: Ubuntu 22.04 LTS
2.	Connect and Install Docker:
ssh -i key.pem ubuntu@<ec2-server-ip>
sudo apt update && sudo apt install docker.io -y
sudo usermod -aG docker ubuntu
3.	Test Docker Installation:
docker --version
________________________________________
Step 3: Configure Jenkins Job
1.	Install Docker on Jenkins Server:
sudo apt install docker.io -y
sudo usermod -aG docker jenkins
sudo systemctl restart jenkins
2.	Create a Freestyle Job:
o	Go to Jenkins dashboard and create a new job.
o	Job Name: jenkins-service
o	Source Code Management:
	Git: https://github.com/docker/getting-started.git
	Branch: master
o	Build Triggers: Poll SCM or webhook.
o	Build Environment: Add timestamp to console output.
o	Build Steps:
echo "Building Docker Image..."
docker build -t auth-service:v1 .
docker tag auth-service:v1 <your-dockerhub-username>/auth-service:v1
docker push <your-dockerhub-username>/auth-service:v1
3.	Login to DockerHub:
o	Switch to Jenkins user:
sudo su - jenkins
docker login
________________________________________
Step 4: Test the Pipeline
1.	Trigger a Build:
o	Run the Jenkins job.
o	Monitor the console output to ensure it builds and pushes the image successfully.
2.	Verify on DockerHub:
o	Check DockerHub for the uploaded image:
docker pull <your-dockerhub-username>/auth-service:v1
________________________________________
Step 5: Deploy the Application
1.	Run the Docker Image on Server:
ssh -i key.pem ubuntu@<server-ip>
docker run -d -p 8080:8080 <your-dockerhub-username>/demo-service:v1
2.	Access the Application:
o	Open http://<server-ip>:8080 in a browser.
________________________________________
Final Validation
•	Pipeline: Fully automated Docker image building and pushing via Jenkins.
•	Deployment: Successfully deployed application running from DockerHub.
________________________________________
Key Learning Outcomes
1.	Set up Jenkins with a secure configuration.
2.	Create a Docker image pipeline and push it to DockerHub.
3.	Troubleshoot permissions, user issues, and Docker configurations.
4.	Deploy the application using Docker.
________________________________________
This project demonstrates the core principles of CI/CD pipelines and integrates DevOps practices efficiently.

