Real-time Interview Crackers!  Part # 18
(Kubernetes Networking issues for the Freshers + Experienced)
Kubernetes Day-2-day Networking issues in the Real-time 
(10 Questions with Scenarios)
Kubernetes Networking issues 
Questionnaire 
1. What are the key components of Kubernetes networking, and how do they work?
2. Scenario: A service in your Kubernetes cluster is unreachable from external traffic. How would you troubleshoot this?
3. Scenario: A Pod cannot communicate with another Pod in the same namespace. What steps will you take?
4. What is a NetworkPolicy in Kubernetes, and how does it help in securing communication between Pods?
5. Scenario: How would you implement a policy that only allows traffic from Pods in the same namespace?
6. Scenario: You observe network latency between Pods across different nodes. What could be the cause, and how would you troubleshoot it?
7. Scenario: You need to expose multiple services behind a single IP address. How would you achieve this?
8. How does Kubernetes handle DNS for service discovery?
9. Scenario: A Pod cannot resolve a service name. How would you troubleshoot?
In Detail
1. What are the key components of Kubernetes networking, and how do they work?
Answer:
Kubernetes networking includes three major components:
•	Pod-to-Pod Communication: Pods within a cluster must communicate without NAT. This is facilitated by the CNI (Container Network Interface) plugins such as Calico or Flannel.
•	Pod-to-Service Communication: Services provide stable endpoints to expose Pods and ensure load balancing across them.
•	External-to-Internal Communication: Ingress resources or Load Balancers expose applications outside the cluster.
________________________________________
2. Scenario: A service in your Kubernetes cluster is unreachable from external traffic. How would you troubleshoot this?
Answer:
•	Check Ingress: Ensure the Ingress resource is correctly defined and has appropriate host rules and paths.
•	Verify Service Type: Ensure the service is of type LoadBalancer or NodePort if it needs external access.
•	Inspect Network Policies: Check if any restrictive NetworkPolicy is blocking the traffic.
•	DNS Issues: Verify that DNS is resolving to the correct external IP.
•	kubectl Commands:
kubectl describe service <service-name>
kubectl get ingress
kubectl logs <ingress-controller-pod>
kubectl describe networkpolicy
________________________________________
3. Scenario: A Pod cannot communicate with another Pod in the same namespace. What steps will you take?
Answer:
1.	Check Pod Status: Ensure both Pods are in the Running state.
kubectl get pods -n <namespace>
2.	Verify Pod IPs: Ensure Pods have valid IPs assigned by the CNI.
kubectl get pods -o wide
3.	Network Policy: Look for any restrictive NetworkPolicies that block communication.
kubectl describe networkpolicy
4.	CNI Issues: Restart the CNI plugin if there's a suspected issue (like Calico or Flannel).
kubectl get pods -n kube-system
kubectl logs <cni-pod-name>
5.	Test Connectivity: Use ping or curl inside Pods.
kubectl exec -it <pod-name> -- sh
ping <target-pod-ip>
________________________________________
4. What is a NetworkPolicy in Kubernetes, and how does it help in securing communication between Pods?
Answer:
A NetworkPolicy defines how Pods are allowed to communicate with each other and with external endpoints. By default, all Pods can communicate freely. With NetworkPolicies, you can:
•	Restrict ingress/egress traffic.
•	Define rules based on labels, IP ranges, and port numbers.
•	Improve security by implementing zero-trust networking.
________________________________________
5. Scenario: How would you implement a policy that only allows traffic from Pods in the same namespace?
Answer:
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-same-namespace
  namespace: dev
spec:
  podSelector: {}
  ingress:
  - from:
    - podSelector: {}
________________________________________
6. Scenario: You observe network latency between Pods across different nodes. What could be the cause, and how would you troubleshoot it?
Answer:
Possible causes:
•	CNI Plugin Performance: Ensure the CNI plugin is optimized for performance.
•	Node Network Configuration: Check for mismatched MTU (Maximum Transmission Unit) sizes.
•	Resource Bottlenecks: Verify CPU/memory resources on nodes.
Troubleshooting steps:
1.	Check Pod Distribution: Ensure Pods are balanced across nodes.
kubectl get pods -o wide
2.	Network Diagnostics: Use tools like tcpdump or wireshark to analyze traffic.
3.	Check Node Conditions:
kubectl describe nodes
4.	Monitor Latency Metrics: Use Prometheus and Grafana dashboards.
________________________________________
7. Scenario: You need to expose multiple services behind a single IP address. How would you achieve this?
Answer:
Use Ingress with path-based or host-based routing.
Example configuration:
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: example-ingress
spec:
  rules:
  - host: example.com
    http:
      paths:
      - path: /app1
        pathType: Prefix
        backend:
          service:
            name: app1-service
            port:
              number: 80
      - path: /app2
        pathType: Prefix
        backend:
          service:
            name: app2-service
            port:
              number: 80
________________________________________
8. How does Kubernetes handle DNS for service discovery?
Answer:
Kubernetes uses CoreDNS for internal DNS service discovery. Each service gets a DNS entry in the format <service-name>.<namespace>.svc.cluster.local. Pods can resolve services using just the service name if they are in the same namespace.
________________________________________
9. Scenario: A Pod cannot resolve a service name. How would you troubleshoot?
Answer:
1.	Check CoreDNS Status: Ensure CoreDNS is running.
kubectl get pods -n kube-system
2.	Inspect CoreDNS Logs:
kubectl logs -n kube-system <coredns-pod>
3.	Verify Service: Ensure the service exists and has endpoints.
kubectl get svc <service-name>
kubectl get endpoints <service-name>
4.	DNS Configuration: Ensure the Pod has the correct DNS settings.
kubectl describe pod <pod-name>
________________________________________
10. Scenario: You need to deploy a stateful application requiring stable network identities. How would you approach this?
Answer:
Use StatefulSets instead of Deployments.
•	StatefulSets provide stable Pod names and persistent storage.
•	DNS entries for each Pod follow the pattern <pod-name>.<service-name>.namespace.svc.cluster.local.
